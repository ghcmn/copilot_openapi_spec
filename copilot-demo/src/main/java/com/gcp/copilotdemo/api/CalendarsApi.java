/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.gcp.copilotdemo.api;

import com.gcp.copilotdemo.model.CalendarDayModel;
import com.gcp.copilotdemo.model.CurrencyModel;
import java.time.LocalDate;
import com.gcp.copilotdemo.model.NextSettlementDayModel;
import com.gcp.copilotdemo.model.ProblemFormatItemModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-13T12:08:29.158795400+05:30[Asia/Calcutta]")
@Validated
@Api(value = "Calendars", description = "the Calendars API")
public interface CalendarsApi {

    default CalendarsApiDelegate getDelegate() {
        return new CalendarsApiDelegate() {};
    }

    /**
     * GET /calendar/next : Obtain the next available settlement date
     * Returns the next settlement date for a given planned date, currency, and payment method.
     *
     * @param paymentMethod The payment method (required)
     * @param plannedDate The date for the proposed payment (required)
     * @param currency The settlement currency (required)
     * @return Success (status code 200)
     *         or Errors occurred (status code 400)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Obtain the next available settlement date", nickname = "getNextSettlementDate", notes = "Returns the next settlement date for a given planned date, currency, and payment method.", response = NextSettlementDayModel.class, tags={ "calendars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = NextSettlementDayModel.class),
        @ApiResponse(code = 400, message = "Errors occurred", response = ProblemFormatItemModel.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/calendar/next",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<NextSettlementDayModel> getNextSettlementDate(@NotNull @ApiParam(value = "The payment method", required = true, allowableValues = "STFO, SWIFT") @Valid @RequestParam(value = "paymentMethod", required = true) String paymentMethod,@NotNull @ApiParam(value = "The date for the proposed payment", required = true) @Valid @RequestParam(value = "plannedDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate plannedDate,@NotNull @ApiParam(value = "The settlement currency", required = true, allowableValues = "AUD, CAD, CHF, DKK, EUR, GBP, HKD, JPY, NOK, NZD, SEK, SGD, USD, ZAR") @Valid @RequestParam(value = "currency", required = true) CurrencyModel currency) {
        return getDelegate().getNextSettlementDate(paymentMethod, plannedDate, currency);
    }


    /**
     * GET /calendar/{date} : the GET method for a single calendar day
     * Retrieve a calendar day for display or update
     *
     * @param date the unique resource identifier for the document (required)
     * @return single calendar entry (status code 200)
     *         or Forbidden (status code 403)
     *         or Method Not Found (status code 405)
     */
    @ApiOperation(value = "the GET method for a single calendar day", nickname = "getSettlementCalendarByDate", notes = "Retrieve a calendar day for display or update", response = CalendarDayModel.class, tags={ "calendars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "single calendar entry", response = CalendarDayModel.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 405, message = "Method Not Found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/calendar/{date}",
        produces = { "application/json" }
    )
    default ResponseEntity<CalendarDayModel> getSettlementCalendarByDate(@ApiParam(value = "the unique resource identifier for the document",required=true) @PathVariable("date") LocalDate date) {
        return getDelegate().getSettlementCalendarByDate(date);
    }


    /**
     * PUT /calendar/{date} : the PUT method for a single calendar day
     * Updates a calendar day record
     *
     * @param date the unique resource identifier for the document (required)
     * @param ifMatch an optimistic lock token respresenting the resource state; usually a hex-encoded MD5 hash value. Obtained from the &#x60;Etag&#x60; response header of a previous GET request for the resource. (required)
     * @param calendarDayModel  (optional)
     * @return calendar entry updated (status code 200)
     *         or Errors occurred (status code 400)
     *         or Forbidden (status code 403)
     *         or Conflict - the &#x60;If-Match&#x60; value supplied on the request does not match the current &#x60;Etag&#x60; of the record (status code 409)
     */
    @ApiOperation(value = "the PUT method for a single calendar day", nickname = "updateSettlementCalendarDay", notes = "Updates a calendar day record", response = CalendarDayModel.class, tags={ "calendars", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "calendar entry updated", response = CalendarDayModel.class),
        @ApiResponse(code = 400, message = "Errors occurred", response = ProblemFormatItemModel.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 409, message = "Conflict - the `If-Match` value supplied on the request does not match the current `Etag` of the record") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/calendar/{date}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CalendarDayModel> updateSettlementCalendarDay(@ApiParam(value = "the unique resource identifier for the document",required=true) @PathVariable("date") LocalDate date,@ApiParam(value = "an optimistic lock token respresenting the resource state; usually a hex-encoded MD5 hash value. Obtained from the `Etag` response header of a previous GET request for the resource." ,required=true) @RequestHeader(value="If-Match", required=true) String ifMatch,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) CalendarDayModel calendarDayModel) {
        return getDelegate().updateSettlementCalendarDay(date, ifMatch, calendarDayModel);
    }

}
